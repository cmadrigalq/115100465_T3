/*
 * Books API
 *
 * This web service offers information on books
 *
 * API version: 0.1.9
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"net/http"
	"path"
	"encoding/json"
)

/*************SET DE DATOS PARA PRUEBAS*********************************/
/*****Libros********/
var booksCollection = []Book{
	Book{BookId: "Book01", PublisherId : "Publisher01", Title   : "Operating System Concepts",
		Edition: "9th"   , Copyright   : "2012"       , Language: "ENGLISH"                  ,
		Pages  : "976"}, 
	Book{BookId: "Book02", PublisherId : "Publisher02", Title   : "Computer Networks",
		Edition: "5th"   , Copyright   : "2010"       , Language: "ENGLISH"                  ,
		Pages  : "960"}}
/*****Autores******/
var authorsCollection = []Author{
	Author{
		AuthorId:"Author01" , BookId: "Book01", Name  : "Abraham Silberschatz",
		Nationality: "U.S.A", Birth : "1976"  , Genere: "H"},
	Author{
		AuthorId:"Author02" , BookId: "Book02", Name  : "Andrew S. Tanenbaum",
		Nationality: "U.S.A", Birth : "1944"  , Genere: "H"}}
/*****Publicadores******/
var publishersCollection = []Publisher{
	Publisher{
		PublisherId : "Publisher01", Name   : "John Wiley & Sons", Country: "U.S.A",
		Founded     : "1807"       , Genere : "varied"},
	Publisher{
		PublisherId : "Publisher02", Name   : "Andrew S. Tanenbaum", Country: "U.S.A",
		Founded     : "2000"       , Genere : "varied"}}
/*************FIN DE SET DE DATOS PARA PRUEBAS**************************/
/***********************************************************************/
/*************Funciones para busqueda de datos *************************/
/****Busqueda de libro*****/
func bookIndex(bookId string) int {
	for i, book := range booksCollection {
        if bookId == book.BookId {
            return i
        }
    }
    return -1
}
/****Busqueda de Autor*****/
func authorIndex(authorId string) int {
	for i, author := range authorsCollection {
        if authorId == author.AuthorId {
            return i
        }
    }
    return -1
}
/****Busqueda de publicador*****/
func publisherIndex(publisherId string) int {
	for i, publisher := range publishersCollection {
        if publisherId == publisher.PublisherId {
            return i
        }
    }
    return -1
}
/****Busqueda de authores por libro*****/
func authorsByBookId(bookId string)[]Author{
	var authors = []Author{};
	for _, author := range authorsCollection {
        if bookId == author.BookId {
            authors = append(authors,author);
        }
    }
	return authors;
}
/****Busqueda de libros por publicador*****/
func booksByPublisherId(publisherId string)[]Book{
	var books = []Book{};
	for _, book := range booksCollection {
        if publisherId == book.PublisherId {
            books = append(books,book);
        }
    }
	return books;
}
/*************Fin de funciones para busqueda de datos ******************/
/***********************************************************************/
/************Funciones para manejo de datos  ***************************/
/*************Fin de Funciones para manejo de datos ********************/
/***Funciones de borrado*/
func deleteBook(id string)bool{
	i := bookIndex(id);
	if i == -1{
		return false;
	}	
	booksCollection = append(booksCollection[:i], booksCollection[i+1:]...);
	return true;
}
func deleteAuthor(id string)bool{
	i := authorIndex(id);
	if i == -1{
		return false;
	}	
	authorsCollection = append(authorsCollection[:i], authorsCollection[i+1:]...);
	return true;
}
func deletePublisher(id string)bool{
	i := publisherIndex(id);
	if i == -1{
		return false;
	}	
	publishersCollection = append(publishersCollection[:i], publishersCollection[i+1:]...);
	return true;
}
/***Funciones de guardado*/
func saveBook( r *http.Request)(bool,error){
	var data Book
    err := json.NewDecoder(r.Body).Decode(&data)
    if err != nil {
        return false,err
	}
	booksCollection = append(booksCollection, data);
	return true,nil
}
func saveAuthor( r *http.Request)(bool,error){
	var data Author
    err := json.NewDecoder(r.Body).Decode(&data)
    if err != nil {
        return false,err
	}
	authorsCollection = append(authorsCollection, data);
	return true,nil
}
func savePublisher( r *http.Request)(bool,error){
	var data Publisher
    err := json.NewDecoder(r.Body).Decode(&data)
    if err != nil {
        return false,err
	}
	publishersCollection = append(publishersCollection, data);
	return true,nil
}
/***Funciones de modificado*/
func updateBook( r *http.Request)(bool,error){
	var data Book
    err := json.NewDecoder(r.Body).Decode(&data)
    if err != nil {
        return false,err
	}
	i := bookIndex(data.BookId)
	if i == -1 {
		return false,nil
	}
	booksCollection[i] =  data
	return true,nil;
}
func updateAuthor( r *http.Request)(bool,error){
	var data Author
    err := json.NewDecoder(r.Body).Decode(&data)
    if err != nil {
        return false,err
	}
	i := authorIndex(data.AuthorId)
	if i == -1 {
		return false,nil
	}
	authorsCollection[i] =  data
	return true,nil;
}
func updatePublisher( r *http.Request)(bool,error){
	var data Publisher;
    err := json.NewDecoder(r.Body).Decode(&data)
    if err != nil {
        return false,err
	}
	i := publisherIndex(data.PublisherId)
	if i == -1 {
		return false,nil
	}
	publishersCollection[i] =  data
	return true,nil;
}

/***********************************************************************/
/************Funciones para atenci√≥n de peticicones ********************/
func AuthorsAuthorIdBooksGet(w http.ResponseWriter, r *http.Request) {
	p := path.Dir(r.URL.Path)
	id := path.Base(p)
	index := authorIndex(id);
	if index == -1{
		return;	
	}
	author := authorsCollection[index];
	index = bookIndex(author.BookId);
	if index == -1{
		return;
	}
	dataJson, _ := json.Marshal(booksCollection[index]);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func AuthorsAuthorIdDelete(w http.ResponseWriter, r *http.Request) {
	if deleteAuthor(path.Base(r.URL.Path)) == false{
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func AuthorsAuthorIdGet(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
    i := authorIndex(id)
    if i == -1 {
        return
    }
    dataJson, _ := json.Marshal(authorsCollection[i])
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.Write(dataJson)
    w.WriteHeader(http.StatusOK)
}

func AuthorsAuthorIdPut(w http.ResponseWriter, r *http.Request) {
	res,err := updateAuthor(r);
	if err != nil{
		http.Error(w, err.Error(), http.StatusBadRequest);
		return
	}
	if res == false{
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func AuthorsPost(w http.ResponseWriter, r *http.Request) {
	_,err :=  saveAuthor(r);
	if err != nil{
		http.Error(w, err.Error(), http.StatusBadRequest);
		return;
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func BooksBookIdAuthorsGet(w http.ResponseWriter, r *http.Request) {
	p := path.Dir(r.URL.Path)
	id := path.Base(p)
	dataJson, _ := json.Marshal(authorsByBookId(id));
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func BooksBookIdDelete(w http.ResponseWriter, r *http.Request) {
	if deleteBook(path.Base(r.URL.Path)) == false{
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func BooksBookIdGet(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
    i := bookIndex(id)
    if i == -1 {
        return
    }
    dataJson, _ := json.Marshal(booksCollection[i])
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.Write(dataJson)
    w.WriteHeader(http.StatusOK)
}

func BooksBookIdPublishersGet(w http.ResponseWriter, r *http.Request) {
	p := path.Dir(r.URL.Path)
	id := path.Base(p)
	index := bookIndex(id);
	if index == -1{
		return;	
	}
	book := booksCollection[index];
	index = publisherIndex(book.PublisherId);
	if index == -1{
		return;
	}
	dataJson, _ := json.Marshal(publishersCollection[index]);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func BooksBookIdPut(w http.ResponseWriter, r *http.Request) {
	res,err := updateBook(r);
	if err != nil{
		http.Error(w, err.Error(), http.StatusBadRequest);
		return
	}
	if res == false{
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func BooksPost(w http.ResponseWriter, r *http.Request) {
	_,err :=  saveBook(r);
	if err != nil{
		http.Error(w, err.Error(), http.StatusBadRequest);
		return;
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func PublisherPublisherIdBooksGet(w http.ResponseWriter, r *http.Request) {
	p := path.Dir(r.URL.Path)
	id := path.Base(p)
	dataJson, _ := json.Marshal(booksByPublisherId(id));
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func PublishersPost(w http.ResponseWriter, r *http.Request) {
	_,err :=  savePublisher(r);
	if err != nil{
		http.Error(w, err.Error(), http.StatusBadRequest);
		return;
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func PublishersPublisherIdDelete(w http.ResponseWriter, r *http.Request) {
	if deletePublisher(path.Base(r.URL.Path)) == false{
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func PublishersPublisherIdGet(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
    i := publisherIndex(id)
    if i == -1 {
        return
    }
    dataJson, _ := json.Marshal(publishersCollection[i])
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.Write(dataJson)
    w.WriteHeader(http.StatusOK)
}

func PublishersPublisherIdPut(w http.ResponseWriter, r *http.Request) {
	res,err := updatePublisher(r);
	if err != nil{
		http.Error(w, err.Error(), http.StatusBadRequest);
		return
	}
	if res == false{
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
